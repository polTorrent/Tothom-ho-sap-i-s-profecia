import React, { useState } from 'react';
import { PlusCircle, Trash2, Edit2, Check } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';

const GestorDespesesViatge = () => {
  const [titol, setTitol] = useState("Tothom ho sap i es profecia");
  const [participants, setParticipants] = useState(["Pol", "Pau", "Marc"]);
  const [despeses, setDespeses] = useState([]);
  const [novaDespesa, setNovaDespesa] = useState({ concepte: '', import: '', pagador: '' });
  const [editantTitol, setEditantTitol] = useState(false);
  const [editantParticipants, setEditantParticipants] = useState(false);

  const afegirDespesa = () => {
    if (novaDespesa.concepte && novaDespesa.import && novaDespesa.pagador) {
      setDespeses([...despeses, { ...novaDespesa, id: Date.now() }]);
      setNovaDespesa({ concepte: '', import: '', pagador: '' });
    }
  };

  const eliminarDespesa = (id) => {
    setDespeses(despeses.filter(despesa => despesa.id !== id));
  };

  const calcularBalanc = () => {
    const total = despeses.reduce((sum, despesa) => sum + parseFloat(despesa.import), 0);
    const perPersona = total / participants.length;
    const balanc = Object.fromEntries(participants.map(p => [p, 0]));

    despeses.forEach(despesa => {
      balanc[despesa.pagador] += parseFloat(despesa.import);
    });

    return Object.fromEntries(
      Object.entries(balanc).map(([nom, valor]) => [nom, valor - perPersona])
    );
  };

  const balanc = calcularBalanc();

  return (
    <Card className="w-full max-w-4xl mx-auto p-6">
      <CardHeader>
        {editantTitol ? (
          <div className="flex items-center">
            <Input
              value={titol}
              onChange={(e) => setTitol(e.target.value)}
              className="text-2xl font-bold text-center"
            />
            <Button onClick={() => setEditantTitol(false)} className="ml-2">
              <Check className="h-4 w-4" />
            </Button>
          </div>
        ) : (
          <div className="flex items-center justify-center">
            <CardTitle className="text-2xl font-bold text-center mb-6">{titol}</CardTitle>
            <Button onClick={() => setEditantTitol(true)} className="ml-2" variant="ghost" size="sm">
              <Edit2 className="h-4 w-4" />
            </Button>
          </div>
        )}
      </CardHeader>
      <CardContent>
        {editantParticipants ? (
          <div className="mb-4">
            {participants.map((participant, index) => (
              <Input
                key={index}
                value={participant}
                onChange={(e) => {
                  const novaLlista = [...participants];
                  novaLlista[index] = e.target.value;
                  setParticipants(novaLlista);
                }}
                className="mb-2"
              />
            ))}
            <Button onClick={() => setEditantParticipants(false)} className="mt-2">
              <Check className="h-4 w-4 mr-2" /> Guardar Participants
            </Button>
          </div>
        ) : (
          <Button onClick={() => setEditantParticipants(true)} className="mb-4" variant="outline">
            <Edit2 className="h-4 w-4 mr-2" /> Editar Participants
          </Button>
        )}

        <div className="flex flex-wrap gap-2 mb-4">
          <Input
            placeholder="Concepte"
            value={novaDespesa.concepte}
            onChange={(e) => setNovaDespesa({ ...novaDespesa, concepte: e.target.value })}
            className="flex-grow"
          />
          <Input
            type="number"
            placeholder="Import"
            value={novaDespesa.import}
            onChange={(e) => setNovaDespesa({ ...novaDespesa, import: e.target.value })}
            className="w-24"
          />
          <select
            className="border rounded px-2 py-1"
            value={novaDespesa.pagador}
            onChange={(e) => setNovaDespesa({ ...novaDespesa, pagador: e.target.value })}
          >
            <option value="">Pagador</option>
            {participants.map((participant, index) => (
              <option key={index} value={participant}>{participant}</option>
            ))}
          </select>
          <Button onClick={afegirDespesa}><PlusCircle className="mr-2" /> Afegir</Button>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full border-collapse">
            <thead>
              <tr className="bg-gray-100">
                <th className="border p-2 text-left">Concepte</th>
                <th className="border p-2 text-left">Import</th>
                <th className="border p-2 text-left">Pagador</th>
                <th className="border p-2 text-left">Accio</th>
              </tr>
            </thead>
            <tbody>
              {despeses.map(despesa => (
                <tr key={despesa.id} className="border-b">
                  <td className="p-2">{despesa.concepte}</td>
                  <td className="p-2">{despesa.import} EUR</td>
                  <td className="p-2">{despesa.pagador}</td>
                  <td className="p-2">
                    <Button variant="destructive" size="sm" onClick={() => eliminarDespesa(despesa.id)}>
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        <div className="mt-6">
          <h3 className="text-xl font-semibold mb-2">Balanc Final</h3>
          {Object.entries(balanc).map(([nom, valor]) => (
            <p key={nom}>{nom}: {valor.toFixed(2)} EUR</p>
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

export default GestorDespesesViatge;
